//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
// Parameters:
//
//   float BlendMode;
//   float Opacity;
//   sampler2D Pattern;
//   float Scale;
//   sampler2D input;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   BlendMode    c0       1
//   Opacity      c1       1
//   Scale        c2       1
//   input        s0       1
//   Pattern      s1       1
//

    ps_3_0
    def c3, 0, 0.00100000005, 1, 0.5
    def c4, 2, 3, 4, 0.166666672
    def c5, 1, 0.333333343, 1.33333337, -0.666666627
    def c6, 0.166666672, 1, 6, 0.666666687
    def c7, 1, -1, -0.333333343, 0.666666627
    def c8, 19, 20, 21, -22
    def c9, -0.166666672, -0.5, -0.666666687, 5
    def c10, 7, 8, 2, 1
    def c11, 9, 2, -1, 10
    def c12, 11, 12, 13, 14
    def c13, 15, 16, 17, 18
    def c14, 23, 24, 25, 26
    dcl_texcoord v0.xy  // uv<0,1>
    dcl_2d s0
    dcl_2d s1

#line 581 "C:\Users\james\GitHub\Imagin.NET\Apps.Paint\Effects\Image\Overlay\PatternOverlay.fx"
    texld r0, v0, s0  // ::color1<0,1,2,3>
    mul r1.xy, c2.x, v0
    texld r1, r1, s1  // ::color2<0,1,2,3>
    if_lt -r0.w, c3.x

#line 118
      cmp r1.xyz, -r1_abs, c3.y, r1  // Blend::blendColor<0,1,2>

#line 124
      mov r2.xz, c3
      if_eq c0.x, r2.x

#line 127
        rcp r1.w, c1.x
        mul_sat r1.xyz, r1.w, r1  // Blend::blendColor<0,1,2>

#line 130
        add r2.xyw, r0.xyzz, r1.xyzz
        mul r2.xyw, r2, c1.x

#line 133
        add r1.w, r2.z, -c1.x
        mul r2.xyw, r2, c3.w
        mad r3.xyz, r1.w, r0, r2.xyww  // ::result<0,1,2>
        mov r3.w, r0.w  // ::result<3>
      else
        if_eq c0.x, r2.z

#line 139
          rcp r1.w, c1.x
          mul_sat r1.xyz, r1.w, r1  // Blend::blendColor<0,1,2>

#line 143
          add r2.xyw, -r0.xyzz, c3.z
          rcp r4.x, r1.x
          rcp r4.y, r1.y
          rcp r4.z, r1.z
          mad_sat r2.xyw, r2, -r4.xyzz, c3.z  // ::result<0,1,2>

#line 146
          lrp r3.xyz, c1.x, r2.xyww, r0  // ::result<0,1,2>
          mov r3.w, r0.w  // ::result<3>
        else
          mov r2.x, c0.x  // ::BlendMode<0>
          if_eq r2.x, c4.x

#line 152
            rcp r1.w, c1.x
            mul_sat r1.xyz, r1.w, r1  // Blend::blendColor<0,1,2>

#line 158
            add r4.xyz, r1, -c3.z
            add r5.xyz, -r1, c3.z
            rcp r1.w, r5.x
            mul r1.w, r0.x, r1.w
            min r2.y, r1.w, c3.z
            cmp r6.x, r4.x, r1.x, r2.y  // ::result<0>
            rcp r1.w, r5.y
            mul r1.w, r0.y, r1.w
            min r2.y, r1.w, c3.z
            cmp r6.y, r4.y, r1.y, r2.y  // ::result<1>
            rcp r1.w, r5.z
            mul r1.w, r0.z, r1.w
            min r2.y, r1.w, c3.z
            cmp r6.z, r4.z, r1.z, r2.y  // ::result<2>

#line 161
            lrp r3.xyz, c1.x, r6, r0  // ::result<0,1,2>
            mov r3.w, r0.w  // ::result<3>
          else
            if_eq r2.x, c4.y

#line 167
              rcp r1.w, c1.x
              mul_sat r1.xyz, r1.w, r1  // Blend::blendColor<0,1,2>

#line 73
              add r4.xyz, -r1.xzyw, r1.zyxw

#line 47
              cmp r2.yw, r4.z, r1.xyzx, r1.xxzy
              min r4.w, r1.z, r2.y  // ::fmin<0>
              max r5.x, r2.w, r1.z  // ::fmax<0>
              add r1.w, -r4.w, r5.x  // ::delta<0>
              add r2.y, r4.w, r5.x  // ::maxplusmin<0>

#line 65
              add r2.w, r2.y, -c3.z
              rcp r4.w, r2.y
              mul r4.w, r1.w, r4.w  // ::hsl<1>
              add r2.y, -r2.y, c4.x
              rcp r2.y, r2.y
              mul r2.y, r1.w, r2.y  // ::hsl<1>
              cmp r6.x, r2.w, r2.y, r4.w  // ::hsl<1>

#line 72
              add r2.yw, r1.xxzy, -r5.x
              rcp r4.w, r1.w

#line 75
              mul r4.y, r4.w, r4.y  // ::hsl<0>
              mad r4.xz, r4, r4.w, c4  // ::hsl<0,0>
              cmp r2.w, -r2_abs.w, r4.x, r4.z  // ::hsl<0>
              cmp r2.y, -r2_abs.y, r4.y, r2.w  // ::hsl<0>
              mul r2.w, r2.y, c4.w  // ::hsl<0>

#line 80
              mad r4.x, r2.y, c6.x, c6.y  // ::hsl<0>
              cmp r6.yzw, r2.y, r2.w, r4.x  // ::hsl<0,0,0>
              cmp r4, -r1_abs.w, c3.x, r6  // ::hsl<1,0,0,0>

#line 46
              add r1.w, -r0.y, r0.x
              cmp r2.yw, r1.w, r0.xyzx, r0.xxzy
              min r1.w, r0.z, r2.y  // ::fmin<0>
              max r5.x, r2.w, r0.z  // ::fmax<0>
              add r1.w, r1.w, r5.x  // ::maxplusmin<0>

#line 52
              mul r5.xyz, r1.w, c3.w  // ::hsl<2,2,2>

#line 90
              if_eq r4.x, c3.x

#line 93
              else

#line 97
                add r2.y, r1.w, -c3.z

#line 24
                add r6, r4, c5  // GetHue::temp3<0,0,0>

#line 98
                mul r2.w, r5.z, r6.x  // ::temp2<0>
                mad r4.y, r1.w, c3.w, r4.x
                mad r4.x, r4.x, -r5.z, r4.y  // ::temp2<0>
                cmp r2.y, r2.y, r4.x, r2.w  // ::temp2<0>
                add r1.w, r1.w, -r2.y  // ::temp1<0>

#line 23
                add r2.w, -r6.y, c3.z
                cmp r2.w, r2.w, r6.y, r6.w  // GetHue::temp3<0>
                cmp r2.w, r6.y, r2.w, r6.z  // GetHue::temp3<0>

#line 29
                add r4.x, -r1.w, r2.y
                mul r4.y, r4.x, c6.z
                mad r4.z, r4.y, r2.w, r1.w  // ::rgbComponent<0>

#line 32
                add r6.xyz, r2.w, c9
                add r2.w, -r2.w, c6.w
                mul r2.w, r2.w, r4.x
                mad r2.w, r2.w, c6.z, r1.w  // ::rgbComponent<0>
                cmp r2.w, r6.z, r1.w, r2.w  // ::rgbComponent<0>
                cmp r2.w, r6.y, r2.w, r2.y  // ::rgbComponent<0>
                cmp r5.x, r6.x, r2.w, r4.z  // ::rgbComponent<0>

#line 23
                add r2.w, -r4.w, c3.z
                add r6, r4.w, c7  // GetHue::temp3<0,0,0,0>
                cmp r2.w, r2.w, r4.w, r6.y  // GetHue::temp3<0>
                cmp r2.w, r4.w, r2.w, r6.x  // GetHue::temp3<0>

#line 29
                mad r4.z, r4.y, r2.w, r1.w  // ::rgbComponent<0>

#line 32
                add r7.xyz, r2.w, c9
                add r2.w, -r2.w, c6.w
                mul r2.w, r2.w, r4.x
                mad r2.w, r2.w, c6.z, r1.w  // ::rgbComponent<0>
                cmp r2.w, r7.z, r1.w, r2.w  // ::rgbComponent<0>
                cmp r2.w, r7.y, r2.w, r2.y  // ::rgbComponent<0>
                cmp r5.y, r7.x, r2.w, r4.z  // ::rgbComponent<0>

#line 23
                add r2.w, -r6.z, c3.z
                add r4.z, r4.w, -c5.z  // GetHue::temp3<0>
                cmp r2.w, r2.w, r6.z, r4.z  // GetHue::temp3<0>
                cmp r2.w, r6.z, r2.w, r6.w  // GetHue::temp3<0>

#line 29
                mad r4.y, r4.y, r2.w, r1.w  // ::rgbComponent<0>

#line 32
                add r6.xyz, r2.w, c9
                add r2.w, -r2.w, c6.w
                mul r2.w, r2.w, r4.x
                mad r2.w, r2.w, c6.z, r1.w  // ::rgbComponent<0>
                cmp r1.w, r6.z, r1.w, r2.w  // ::rgbComponent<0>
                cmp r1.w, r6.y, r1.w, r2.y  // ::rgbComponent<0>
                cmp r5.z, r6.x, r1.w, r4.y  // ::rgbComponent<0>

#line 107
              endif

#line 174
              lrp r3.xyz, c1.x, r5, r0  // ::result<0,1,2>
              mov r3.w, r0.w  // ::result<3>
            else
              if_eq r2.x, c4.z

#line 180
                rcp r1.w, c1.x
                mul_sat r1.xyz, r1.w, r1  // Blend::blendColor<0,1,2>

#line 198
                min r4.xyz, r0, r1  // ::result<0,1,2>

#line 201
                lrp r3.xyz, c1.x, r4, r0  // ::result<0,1,2>
                mov r3.w, r0.w  // ::result<3>
              else
                if_eq r2.x, c9.w

#line 207
                  rcp r1.w, c1.x
                  mul_sat r1.xyz, r1.w, r1  // Blend::blendColor<0,1,2>

#line 211
                  add r4.xyz, r0, -r1

#line 214
                  lrp r3.xyz, c1.x, r4_abs, r0  // ::result<0,1,2>
                  mov r3.w, r0.w  // ::result<3>
                else
                  if_eq r2.x, c6.z

#line 220
                    rcp r1.w, c1.x
                    mul_sat r1.xyz, r1.w, r1  // Blend::blendColor<0,1,2>

#line 224
                    add r4.xyz, r0, -c3.w
                    add r4.xyz, r4, r4
                    add r5.xyz, r1, -c3.w
                    mad r4.xyz, r4, -r5, c3.w  // ::result<0,1,2>

#line 227
                    lrp r3.xyz, c1.x, r4, r0  // ::result<0,1,2>
                    mov r3.w, r0.w  // ::result<3>
                  else
                    if_eq r2.x, c10.x

#line 233
                      rcp r1.w, c1.x
                      mul_sat r1.xyz, r1.w, r1  // Blend::blendColor<0,1,2>

#line 238
                      add r4.xyz, r0, -c3.z
                      mul r5.xyz, r1, r1
                      add r6.xyz, -r0, c3.z
                      rcp r1.w, r6.x
                      mul r1.w, r1.w, r5.x
                      min r2.y, r1.w, c3.z
                      cmp r7.x, -r4_abs.x, r0.x, r2.y  // ::result<0>
                      rcp r1.w, r6.y
                      mul r1.w, r1.w, r5.y
                      min r2.y, r1.w, c3.z
                      cmp r7.y, -r4_abs.y, r0.y, r2.y  // ::result<1>
                      rcp r1.w, r6.z
                      mul r1.w, r1.w, r5.z
                      min r2.y, r1.w, c3.z
                      cmp r7.z, -r4_abs.z, r0.z, r2.y  // ::result<2>

#line 241
                      lrp r3.xyz, c1.x, r7, r0  // ::result<0,1,2>
                      mov r3.w, r0.w  // ::result<3>
                    else
                      if_eq r2.x, c10.y

#line 247
                        rcp r1.w, c1.x
                        mul_sat r1.xyz, r1.w, r1  // Blend::blendColor<0,1,2>

#line 264
                        add r4.xyz, -r1, c3.w
                        add r5.xyz, -r0, c3.z
                        add r6.xyz, r1, -c3.w
                        mad r6.xyz, r6, -c10.z, c10.w
                        mad r5.xyz, r5, -r6, c3.z  // ::result<0,1,2>

#line 256
                        dp2add r1.w, r0.x, r1.x, c3.x  // ::result<0>
                        cmp r6.x, r4.x, r1.w, r5.x  // ::result<0>

#line 262
                        dp2add r1.w, r0.y, r1.y, c3.x  // ::result<1>
                        cmp r6.y, r4.y, r1.w, r5.y  // ::result<1>

#line 268
                        dp2add r1.w, r0.z, r1.z, c3.x  // ::result<2>
                        cmp r6.z, r4.z, r1.w, r5.z  // ::result<2>

#line 271
                        lrp r3.xyz, c1.x, r6, r0  // ::result<0,1,2>
                        mov r3.w, r0.w  // ::result<3>
                      else
                        if_eq r2.x, c11.x

#line 277
                          rcp r1.w, c1.x
                          mul_sat r1.xyz, r1.w, r1  // Blend::blendColor<0,1,2>

#line 282
                          add r4.xyz, r1, -c3.w
                          add r5.xyz, r1, r1
                          add r6.xyz, -r0, c3.z
                          rcp r1.w, r5.x
                          mad r1.w, r6.x, -r1.w, c3.z
                          max r2.y, r1.w, c3.x
                          cmp r1.w, -r5.x, r5.x, r2.y
                          add r7.xyz, r4, r4
                          mad r8.xyz, r4, c11.y, c11.z
                          mad r9.xyz, r4, -c10.z, c10.w
                          rcp r2.y, r9.x
                          mul r2.y, r0.x, r2.y
                          min r4.w, r2.y, c3.z
                          cmp r2.y, r8.x, r7.x, r4.w
                          cmp r1.w, r4.x, r2.y, r1.w
                          add r1.w, r1.w, -c3.w
                          cmp r10.x, r1.w, c3.z, c3.x  // ::result<0>
                          rcp r1.w, r5.y
                          mad r1.w, r6.y, -r1.w, c3.z
                          max r2.y, r1.w, c3.x
                          cmp r1.w, -r5.y, r5.y, r2.y
                          rcp r2.y, r9.y
                          mul r2.y, r0.y, r2.y
                          min r4.x, r2.y, c3.z
                          cmp r2.y, r8.y, r7.y, r4.x
                          cmp r1.w, r4.y, r2.y, r1.w
                          add r1.w, r1.w, -c3.w
                          cmp r10.y, r1.w, c3.z, c3.x  // ::result<1>
                          rcp r1.w, r5.z
                          mad r1.w, r6.z, -r1.w, c3.z
                          max r2.y, r1.w, c3.x
                          cmp r1.w, -r5.z, r5.z, r2.y
                          rcp r2.y, r9.z
                          mul r2.y, r0.z, r2.y
                          min r4.x, r2.y, c3.z
                          cmp r2.y, r8.z, r7.z, r4.x
                          cmp r1.w, r4.z, r2.y, r1.w
                          add r1.w, r1.w, -c3.w
                          cmp r10.z, r1.w, c3.z, c3.x  // ::result<2>

#line 285
                          lrp r3.xyz, c1.x, r10, r0  // ::result<0,1,2>
                          mov r3.w, r0.w  // ::result<3>
                        else
                          if_eq r2.x, c11.w

#line 291
                            rcp r1.w, c1.x
                            mul_sat r1.xyz, r1.w, r1  // Blend::blendColor<0,1,2>

#line 46
                            add r1.w, -r0.y, r0.x
                            cmp r2.yw, r1.w, r0.xyzx, r0.xxzy
                            min r1.w, r0.z, r2.y  // ::fmin<0>
                            max r4.x, r2.w, r0.z  // ::fmax<0>
                            add r2.y, -r1.w, r4.x  // ::delta<0>
                            add r1.w, r1.w, r4.x  // ::maxplusmin<0>

#line 52
                            mul r4.xyz, r1.w, c3.w  // ::hsl<2,2,2>

#line 65
                            add r2.w, r1.w, -c3.z
                            rcp r4.w, r1.w
                            mul r4.w, r2.y, r4.w  // ::hsl<1>
                            add r5.x, -r1.w, c4.x
                            rcp r5.x, r5.x
                            mul r5.x, r2.y, r5.x  // ::hsl<1>
                            cmp r4.w, r2.w, r5.x, r4.w  // ::hsl<1>

#line 81
                            cmp r2.y, -r2_abs.y, c3.x, r4.w  // ::hsl<1>

#line 90
                            if_eq r2.y, c3.x

#line 93
                            else

#line 73
                              add r5.xyz, -r1.xzyw, r1.zyxw

#line 47
                              cmp r6.xy, r5.z, r1.yxzw, r1
                              min r4.w, r1.z, r6.x  // ::fmin<0>
                              max r5.w, r6.y, r1.z  // ::fmax<0>
                              add r4.w, -r4.w, r5.w  // ::delta<0>

#line 72
                              add r6.xy, r1, -r5.w
                              rcp r5.w, r4.w

#line 75
                              mul r5.y, r5.w, r5.y  // ::hsl<0>
                              mad r5.xz, r5, r5.w, c4  // ::hsl<0,0>
                              cmp r5.x, -r6_abs.y, r5.x, r5.z  // ::hsl<0>
                              cmp r5.x, -r6_abs.x, r5.y, r5.x  // ::hsl<0>
                              mul r5.y, r5.x, c4.w  // ::hsl<0>

#line 80
                              mad r5.z, r5.x, c6.x, c6.y  // ::hsl<0>
                              cmp r5.x, r5.x, r5.y, r5.z  // ::hsl<0>
                              cmp r4.w, -r4_abs.w, c3.x, r5.x  // ::hsl<0>

#line 98
                              add r5.x, r2.y, c3.z
                              mul r5.x, r4.z, r5.x  // ::temp2<0>
                              mad r5.y, r1.w, c3.w, r2.y
                              mad r2.y, r2.y, -r4.z, r5.y  // ::temp2<0>
                              cmp r2.y, r2.w, r2.y, r5.x  // ::temp2<0>
                              add r1.w, r1.w, -r2.y  // ::temp1<0>

#line 22
                              add r5, r4.w, c5.yzwx  // GetHue::temp3<0,0,0,0>
                              add r2.w, -r5.x, c3.z
                              cmp r2.w, r2.w, r5.x, r5.z  // GetHue::temp3<0>
                              cmp r2.w, r5.x, r2.w, r5.y  // GetHue::temp3<0>

#line 29
                              add r5.x, -r1.w, r2.y
                              mul r5.y, r5.x, c6.z
                              mad r5.z, r5.y, r2.w, r1.w  // ::rgbComponent<0>

#line 32
                              add r6.xyz, r2.w, c9
                              add r2.w, -r2.w, c6.w
                              mul r2.w, r2.w, r5.x
                              mad r2.w, r2.w, c6.z, r1.w  // ::rgbComponent<0>
                              cmp r2.w, r6.z, r1.w, r2.w  // ::rgbComponent<0>
                              cmp r2.w, r6.y, r2.w, r2.y  // ::rgbComponent<0>
                              cmp r4.x, r6.x, r2.w, r5.z  // ::rgbComponent<0>

#line 23
                              add r2.w, -r4.w, c3.z
                              add r6, r4.w, -c5.xywz  // GetHue::temp3<0,0,0,0>
                              cmp r2.w, r2.w, r4.w, r6.x  // GetHue::temp3<0>
                              cmp r2.w, r4.w, r2.w, r5.w  // GetHue::temp3<0>

#line 29
                              mad r4.w, r5.y, r2.w, r1.w  // ::rgbComponent<0>

#line 32
                              add r7.xyz, r2.w, c9
                              add r2.w, -r2.w, c6.w
                              mul r2.w, r2.w, r5.x
                              mad r2.w, r2.w, c6.z, r1.w  // ::rgbComponent<0>
                              cmp r2.w, r7.z, r1.w, r2.w  // ::rgbComponent<0>
                              cmp r2.w, r7.y, r2.w, r2.y  // ::rgbComponent<0>
                              cmp r4.y, r7.x, r2.w, r4.w  // ::rgbComponent<0>

#line 23
                              add r2.w, -r6.y, c3.z
                              cmp r2.w, r2.w, r6.y, r6.w  // GetHue::temp3<0>
                              cmp r2.w, r6.y, r2.w, r6.z  // GetHue::temp3<0>

#line 29
                              mad r4.w, r5.y, r2.w, r1.w  // ::rgbComponent<0>

#line 32
                              add r5.yzw, r2.w, c9.xxyz
                              add r2.w, -r2.w, c6.w
                              mul r2.w, r2.w, r5.x
                              mad r2.w, r2.w, c6.z, r1.w  // ::rgbComponent<0>
                              cmp r1.w, r5.w, r1.w, r2.w  // ::rgbComponent<0>
                              cmp r1.w, r5.z, r1.w, r2.y  // ::rgbComponent<0>
                              cmp r4.z, r5.y, r1.w, r4.w  // ::rgbComponent<0>

#line 107
                            endif

#line 298
                            lrp r3.xyz, c1.x, r4, r0  // ::result<0,1,2>
                            mov r3.w, r0.w  // ::result<3>
                          else
                            if_eq r2.x, c12.x

#line 304
                              rcp r1.w, c1.x
                              mul_sat r1.xyz, r1.w, r1  // Blend::blendColor<0,1,2>

#line 323
                              max r4.xyz, r0, r1  // ::result<0,1,2>

#line 326
                              lrp r3.xyz, c1.x, r4, r0  // ::result<0,1,2>
                              mov r3.w, r0.w  // ::result<3>
                            else
                              if_eq r2.x, c12.y

#line 332
                                rcp r1.w, c1.x
                                mul_sat r1.xyz, r1.w, r1  // Blend::blendColor<0,1,2>

#line 336
                                add r4.xyz, r0, r1
                                add_sat r4.xyz, r4, -c3.z  // ::result<0,1,2>

#line 339
                                lrp r3.xyz, c1.x, r4, r0  // ::result<0,1,2>
                                mov r3.w, r0.w  // ::result<3>
                              else
                                if_eq r2.x, c12.z

#line 345
                                  rcp r1.w, c1.x
                                  mul_sat r1.xyz, r1.w, r1  // Blend::blendColor<0,1,2>

#line 349
                                  add r4.xyz, r0, r1  // ::result<0,1,2>

#line 352
                                  lrp r3.xyz, c1.x, r4, r0  // ::result<0,1,2>
                                  mov r3.w, r0.w  // ::result<3>
                                else
                                  if_eq r2.x, c12.w

#line 358
                                    rcp r1.w, c1.x
                                    mul_sat r1.xyz, r1.w, r1  // Blend::blendColor<0,1,2>

#line 375
                                    add r4.xyz, -r1, c3.w
                                    add r5.xyz, r1, -c3.w
                                    mad r5.xyz, r5, c4.x, r0  // ::result<0,1,2>
                                    mad r6.xyz, r1, c4.x, r0
                                    add r6.xyz, r6, -c3.z  // ::result<0,1,2>
                                    cmp r4.xyz, r4, r6, r5  // ::result<0,1,2>

#line 382
                                    lrp r3.xyz, c1.x, r4, r0  // ::result<0,1,2>
                                    mov r3.w, r0.w  // ::result<3>
                                  else
                                    if_eq r2.x, c13.x

#line 388
                                      rcp r1.w, c1.x
                                      mul_sat r1.xyz, r1.w, r1  // Blend::blendColor<0,1,2>

#line 73
                                      add r4.xyz, -r0.xzyw, r0.zyxw

#line 47
                                      cmp r2.yw, r4.z, r0.xyzx, r0.xxzy
                                      min r1.w, r0.z, r2.y  // ::fmin<0>
                                      max r4.w, r2.w, r0.z  // ::fmax<0>
                                      add r2.y, -r1.w, r4.w  // ::delta<0>
                                      add r1.w, r1.w, r4.w  // ::maxplusmin<0>

#line 65
                                      add r2.w, r1.w, -c3.z
                                      rcp r5.x, r1.w
                                      mul r5.x, r2.y, r5.x  // ::hsl<1>
                                      add r1.w, -r1.w, c4.x
                                      rcp r1.w, r1.w
                                      mul r1.w, r1.w, r2.y  // ::hsl<1>
                                      cmp r5.x, r2.w, r1.w, r5.x  // ::hsl<1>

#line 72
                                      add r6.xy, r0, -r4.w
                                      rcp r1.w, r2.y

#line 75
                                      mul r2.w, r1.w, r4.y  // ::hsl<0>
                                      mad r4.xy, r4.xzzw, r1.w, c4.xzzw  // ::hsl<0,0>
                                      cmp r1.w, -r6_abs.y, r4.x, r4.y  // ::hsl<0>
                                      cmp r1.w, -r6_abs.x, r2.w, r1.w  // ::hsl<0>
                                      mul r2.w, r1.w, c4.w  // ::hsl<0>

#line 80
                                      mad r4.x, r1.w, c6.x, c6.y  // ::hsl<0>
                                      cmp r5.yzw, r1.w, r2.w, r4.x  // ::hsl<0,0,0>
                                      cmp r4, -r2_abs.y, c3.x, r5  // ::hsl<1,0,0,0>

#line 46
                                      add r1.w, -r1.y, r1.x
                                      cmp r2.yw, r1.w, r1.xyzx, r1.xxzy
                                      min r5.x, r1.z, r2.y  // ::fmin<0>
                                      max r5.y, r2.w, r1.z  // ::fmax<0>
                                      add r1.w, r5.x, r5.y  // ::maxplusmin<0>

#line 52
                                      mul r5.xyz, r1.w, c3.w  // ::hsl<2,2,2>

#line 90
                                      if_eq r4.x, c3.x

#line 93
                                      else

#line 97
                                        add r2.y, r1.w, -c3.z

#line 24
                                        add r6, r4, c5  // GetHue::temp3<0,0,0>

#line 98
                                        mul r2.w, r5.z, r6.x  // ::temp2<0>
                                        mad r4.y, r1.w, c3.w, r4.x
                                        mad r4.x, r4.x, -r5.z, r4.y  // ::temp2<0>
                                        cmp r2.y, r2.y, r4.x, r2.w  // ::temp2<0>
                                        add r1.w, r1.w, -r2.y  // ::temp1<0>

#line 23
                                        add r2.w, -r6.y, c3.z
                                        cmp r2.w, r2.w, r6.y, r6.w  // GetHue::temp3<0>
                                        cmp r2.w, r6.y, r2.w, r6.z  // GetHue::temp3<0>

#line 29
                                        add r4.x, -r1.w, r2.y
                                        mul r4.y, r4.x, c6.z
                                        mad r4.z, r4.y, r2.w, r1.w  // ::rgbComponent<0>

#line 32
                                        add r6.xyz, r2.w, c9
                                        add r2.w, -r2.w, c6.w
                                        mul r2.w, r2.w, r4.x
                                        mad r2.w, r2.w, c6.z, r1.w  // ::rgbComponent<0>
                                        cmp r2.w, r6.z, r1.w, r2.w  // ::rgbComponent<0>
                                        cmp r2.w, r6.y, r2.w, r2.y  // ::rgbComponent<0>
                                        cmp r5.x, r6.x, r2.w, r4.z  // ::rgbComponent<0>

#line 23
                                        add r2.w, -r4.w, c3.z
                                        add r6, r4.w, c7  // GetHue::temp3<0,0,0,0>
                                        cmp r2.w, r2.w, r4.w, r6.y  // GetHue::temp3<0>
                                        cmp r2.w, r4.w, r2.w, r6.x  // GetHue::temp3<0>

#line 29
                                        mad r4.z, r4.y, r2.w, r1.w  // ::rgbComponent<0>

#line 32
                                        add r7.xyz, r2.w, c9
                                        add r2.w, -r2.w, c6.w
                                        mul r2.w, r2.w, r4.x
                                        mad r2.w, r2.w, c6.z, r1.w  // ::rgbComponent<0>
                                        cmp r2.w, r7.z, r1.w, r2.w  // ::rgbComponent<0>
                                        cmp r2.w, r7.y, r2.w, r2.y  // ::rgbComponent<0>
                                        cmp r5.y, r7.x, r2.w, r4.z  // ::rgbComponent<0>

#line 23
                                        add r2.w, -r6.z, c3.z
                                        add r4.z, r4.w, -c5.z  // GetHue::temp3<0>
                                        cmp r2.w, r2.w, r6.z, r4.z  // GetHue::temp3<0>
                                        cmp r2.w, r6.z, r2.w, r6.w  // GetHue::temp3<0>

#line 29
                                        mad r4.y, r4.y, r2.w, r1.w  // ::rgbComponent<0>

#line 32
                                        add r6.xyz, r2.w, c9
                                        add r2.w, -r2.w, c6.w
                                        mul r2.w, r2.w, r4.x
                                        mad r2.w, r2.w, c6.z, r1.w  // ::rgbComponent<0>
                                        cmp r1.w, r6.z, r1.w, r2.w  // ::rgbComponent<0>
                                        cmp r1.w, r6.y, r1.w, r2.y  // ::rgbComponent<0>
                                        cmp r5.z, r6.x, r1.w, r4.y  // ::rgbComponent<0>

#line 107
                                      endif

#line 395
                                      lrp r3.xyz, c1.x, r5, r0  // ::result<0,1,2>
                                      mov r3.w, r0.w  // ::result<3>
                                    else
                                      if_eq r2.x, c13.y

#line 401
                                        rcp r1.w, c1.x
                                        mul_sat r1.xyz, r1.w, r1  // Blend::blendColor<0,1,2>

#line 405
                                        mul r4.xyz, r0, r1  // ::result<0,1,2>

#line 408
                                        lrp r3.xyz, c1.x, r4, r0  // ::result<0,1,2>
                                        mov r3.w, r0.w  // ::result<3>
                                      else
                                        if_eq r2.x, c13.z

#line 414
                                          rcp r1.w, c1.x
                                          mul_sat r1.xyz, r1.w, r1  // Blend::blendColor<0,1,2>

#line 417
                                          add r4.xyz, -r0, c3.z
                                          add r4.xyz, -r1, r4
                                          add r4.xyz, -r4_abs, c3.z  // ::result<0,1,2>

#line 420
                                          lrp r3.xyz, c1.x, r4, r0  // ::result<0,1,2>
                                          mov r3.w, r0.w  // ::result<3>
                                        else
                                          if_eq r2.x, c13.w
                                            add r1.w, r2.z, -c1.x
                                            add r2.y, -r0.w, c3.z
                                            mad r3.w, r1.w, -r2.y, c3.z  // ::result<3>

#line 428
                                            mul r2.yzw, r1.xxyz, c1.x
                                            rcp r4.x, r3.w
                                            mul r4.yzw, r0.w, r0.xxyz
                                            mul r4.yzw, r1.w, r4
                                            mul r4.yzw, r4.x, r4
                                            mad r3.xyz, r2.yzww, r4.x, r4.yzww  // ::result<0,1,2>
                                          else
                                            if_eq r2.x, c8.x

#line 434
                                              rcp r1.w, c1.x
                                              mul_sat r1.xyz, r1.w, r1  // Blend::blendColor<0,1,2>

#line 452
                                              add r2.yzw, -r0.xxyz, c3.w
                                              add r4.xyz, r0, -c3.w
                                              mad r4.xyz, r4, -c10.z, c10.w
                                              add r5.xyz, -r1, c3.z
                                              mad r4.xyz, r4, -r5, c3.z  // ::result<0,1,2>

#line 444
                                              dp2add r1.w, r1.x, r0.x, c3.x  // ::result<0>
                                              cmp r5.x, r2.y, r1.w, r4.x  // ::result<0>

#line 450
                                              dp2add r1.w, r1.y, r0.y, c3.x  // ::result<1>
                                              cmp r5.y, r2.z, r1.w, r4.y  // ::result<1>

#line 456
                                              dp2add r1.w, r1.z, r0.z, c3.x  // ::result<2>
                                              cmp r5.z, r2.w, r1.w, r4.z  // ::result<2>

#line 459
                                              lrp r3.xyz, c1.x, r5, r0  // ::result<0,1,2>
                                            else
                                              if_eq r2.x, c8.y

#line 465
                                                rcp r1.w, c1.x
                                                mul_sat r1.xyz, r1.w, r1  // Blend::blendColor<0,1,2>

#line 468
                                                min r2.yzw, r1.xxyz, r0.xxyz
                                                max r4.xyz, r0, r1
                                                add r2.yzw, r2, -r4.xxyz
                                                add r2.yzw, r2, c3.z  // ::result<0,1,2>

#line 471
                                                lrp r3.xyz, c1.x, r2.yzww, r0  // ::result<0,1,2>
                                              else
                                                if_eq r2.x, c8.z

#line 477
                                                  rcp r1.w, c1.x
                                                  mul_sat r1.xyz, r1.w, r1  // Blend::blendColor<0,1,2>

#line 494
                                                  add r2.yzw, -r1.xxyz, c3.w
                                                  add r4.xyz, r1, -c3.w
                                                  add r4.xyz, r4, r4
                                                  max r5.xyz, r0, r4  // ::result<0,1,2>
                                                  add r4.xyz, r1, r1
                                                  min r6.xyz, r4, r0  // ::result<0,1,2>
                                                  cmp r2.yzw, r2, r6.xxyz, r5.xxyz  // ::result<0,1,2>

#line 501
                                                  lrp r3.xyz, c1.x, r2.yzww, r0  // ::result<0,1,2>
                                                else
                                                  add r1.w, r2.x, c8.w

#line 507
                                                  rcp r2.x, c1.x
                                                  mul_sat r2.xyz, r1, r2.x  // Blend::blendColor<0,1,2>

#line 512
                                                  add r4.xyz, r2, -c3.z
                                                  mul r5.xyz, r0, r0
                                                  add r6.xyz, -r2, c3.z
                                                  rcp r2.w, r6.x
                                                  mul r2.w, r2.w, r5.x
                                                  min r4.w, r2.w, c3.z
                                                  cmp r7.x, r4.x, r2.x, r4.w  // ::result<0>
                                                  rcp r2.w, r6.y
                                                  mul r2.w, r2.w, r5.y
                                                  min r4.x, r2.w, c3.z
                                                  cmp r7.y, r4.y, r2.y, r4.x  // ::result<1>
                                                  rcp r2.w, r6.z
                                                  mul r2.w, r2.w, r5.z
                                                  min r4.x, r2.w, c3.z
                                                  cmp r7.z, r4.z, r2.z, r4.x  // ::result<2>

#line 515
                                                  lrp r3.xyz, c1.x, r7, r0  // ::result<0,1,2>
                                                  cmp r1.xyz, -r1_abs.w, r2, r1  // Blend::blendColor<0,1,2>
                                                endif
                                              endif
                                            endif
                                            mov r3.w, r0.w  // ::result<3>
                                          endif
                                        endif
                                      endif
                                    endif
                                  endif
                                endif
                              endif
                            endif
                          endif
                        endif
                      endif
                    endif
                  endif
                endif
              endif
            endif
          endif
        endif
      endif

#line 521
      mov r2.x, c0.x  // ::BlendMode<0>
      if_eq r2.x, c14.x

#line 524
        rcp r1.w, c1.x
        mul_sat r2.yzw, r1.w, r1.xxyz  // Blend::blendColor<0,1,2>

#line 46
        add r1.w, -r0.y, r0.x
        cmp r4.xy, r1.w, r0.yxzw, r0
        min r5.x, r0.z, r4.x  // ::fmin<0>
        max r5.y, r4.y, r0.z  // ::fmax<0>
        add r4.x, r5.x, r5.y  // ::maxplusmin<0>

#line 52
        mul r4.yzw, r4.x, c3.w  // ::hsl<2,2,2>

#line 46
        add r5.z, -r2.z, r2.y
        cmp r2.yz, r5.z, r2.xzyw, r2
        min r5.z, r2.w, r2.y  // ::fmin<0>
        max r5.w, r2.z, r2.w  // ::fmax<0>
        add r2.y, -r5.z, r5.w  // ::delta<0>
        add r2.z, r5.z, r5.w  // ::maxplusmin<0>

#line 65
        add r2.w, r2.z, -c3.z
        rcp r5.z, r2.z
        mul r5.z, r2.y, r5.z  // ::hsl<1>
        add r2.z, -r2.z, c4.x
        rcp r2.z, r2.z
        mul r2.z, r2.z, r2.y  // ::hsl<1>
        cmp r2.z, r2.w, r2.z, r5.z  // ::hsl<1>

#line 81
        cmp r2.y, -r2_abs.y, c3.x, r2.z  // ::hsl<1>

#line 90
        if_eq r2.y, c3.x

#line 93
        else

#line 48
          add r2.z, -r5.x, r5.y  // ::delta<0>

#line 72
          add r5.xy, r0, -r5.y
          add r2.w, -r0.z, r0.y
          rcp r5.z, r2.z
          mul r2.w, r2.w, r5.z  // ::hsl<0>
          add r5.w, -r0.x, r0.z
          mad r5.w, r5.w, r5.z, c4.x  // ::hsl<0>
          mad r1.w, r1.w, r5.z, c4.z  // ::hsl<0>
          cmp r1.w, -r5_abs.y, r5.w, r1.w  // ::hsl<0>
          cmp r1.w, -r5_abs.x, r2.w, r1.w  // ::hsl<0>
          mul r2.w, r1.w, c4.w  // ::hsl<0>

#line 80
          mad r5.x, r1.w, c6.x, c6.y  // ::hsl<0>
          cmp r1.w, r1.w, r2.w, r5.x  // ::hsl<0>
          cmp r1.w, -r2_abs.z, c3.x, r1.w  // ::hsl<0>

#line 97
          add r2.z, r4.x, -c3.z
          add r2.w, r2.y, c3.z
          mul r2.w, r2.w, r4.w  // ::temp2<0>
          mad r5.x, r4.x, c3.w, r2.y
          mad r2.y, r2.y, -r4.w, r5.x  // ::temp2<0>
          cmp r2.y, r2.z, r2.y, r2.w  // ::temp2<0>
          add r2.z, -r2.y, r4.x  // ::temp1<0>

#line 22
          add r5, r1.w, c5.yzwx  // GetHue::temp3<0,0,0,0>
          add r2.w, -r5.x, c3.z
          cmp r2.w, r2.w, r5.x, r5.z  // GetHue::temp3<0>
          cmp r2.w, r5.x, r2.w, r5.y  // GetHue::temp3<0>

#line 29
          add r4.x, -r2.z, r2.y
          mul r5.x, r4.x, c6.z
          mad r5.y, r5.x, r2.w, r2.z  // ::rgbComponent<0>

#line 32
          add r6.xyz, r2.w, c9
          add r2.w, -r2.w, c6.w
          mul r2.w, r2.w, r4.x
          mad r2.w, r2.w, c6.z, r2.z  // ::rgbComponent<0>
          cmp r2.w, r6.z, r2.z, r2.w  // ::rgbComponent<0>
          cmp r2.w, r6.y, r2.w, r2.y  // ::rgbComponent<0>
          cmp r4.y, r6.x, r2.w, r5.y  // ::rgbComponent<0>

#line 23
          add r2.w, -r1.w, c3.z
          add r6, r1.w, -c5.xywz  // GetHue::temp3<0,0,0,0>
          cmp r2.w, r2.w, r1.w, r6.x  // GetHue::temp3<0>
          cmp r1.w, r1.w, r2.w, r5.w  // GetHue::temp3<0>

#line 29
          mad r2.w, r5.x, r1.w, r2.z  // ::rgbComponent<0>

#line 32
          add r5.yzw, r1.w, c9.xxyz
          add r1.w, -r1.w, c6.w
          mul r1.w, r1.w, r4.x
          mad r1.w, r1.w, c6.z, r2.z  // ::rgbComponent<0>
          cmp r1.w, r5.w, r2.z, r1.w  // ::rgbComponent<0>
          cmp r1.w, r5.z, r1.w, r2.y  // ::rgbComponent<0>
          cmp r4.z, r5.y, r1.w, r2.w  // ::rgbComponent<0>

#line 23
          add r1.w, -r6.y, c3.z
          cmp r1.w, r1.w, r6.y, r6.w  // GetHue::temp3<0>
          cmp r1.w, r6.y, r1.w, r6.z  // GetHue::temp3<0>

#line 29
          mad r2.w, r5.x, r1.w, r2.z  // ::rgbComponent<0>

#line 32
          add r5.xyz, r1.w, c9
          add r1.w, -r1.w, c6.w
          mul r1.w, r1.w, r4.x
          mad r1.w, r1.w, c6.z, r2.z  // ::rgbComponent<0>
          cmp r1.w, r5.z, r2.z, r1.w  // ::rgbComponent<0>
          cmp r1.w, r5.y, r1.w, r2.y  // ::rgbComponent<0>
          cmp r4.w, r5.x, r1.w, r2.w  // ::rgbComponent<0>

#line 107
        endif

#line 531
        lrp r3.xyz, c1.x, r4.yzww, r0  // ::result<0,1,2>
      else
        if_eq r2.x, c14.y

#line 537
          rcp r1.w, c1.x
          mul_sat r2.yzw, r1.w, r1.xxyz  // Blend::blendColor<0,1,2>

#line 541
          add r4.xyz, -r0, c3.z
          add r2.yzw, -r2, c3.z
          mad r2.yzw, r4.xxyz, -r2, c3.z  // ::result<0,1,2>

#line 544
          lrp r3.xyz, c1.x, r2.yzww, r0  // ::result<0,1,2>
        else
          if_eq r2.x, c14.z

#line 550
            rcp r1.w, c1.x
            mul_sat r2.yzw, r1.w, r1.xxyz  // Blend::blendColor<0,1,2>

#line 555
            add r4.xyz, r2.yzww, -c3.w
            add r5.xyz, r0, r0
            mul r6.xyz, r0, r0
            mad r7.xyz, r2.yzww, -c10.z, c10.w
            mul r6.xyz, r6, r7
            mad r6.xyz, r5, r2.yzww, r6
            rsq r1.w, r0.x
            rcp r1.w, r1.w
            mad r7.xyz, r2.yzww, c11.y, c11.z
            add r2.yzw, -r2, c3.z
            mul r2.yzw, r2, r5.xxyz
            mad r1.w, r1.w, r7.x, r2.y
            cmp r5.x, r4.x, r1.w, r6.x  // ::result<0>
            rsq r1.w, r0.y
            rcp r1.w, r1.w
            mad r1.w, r1.w, r7.y, r2.z
            cmp r5.y, r4.y, r1.w, r6.y  // ::result<1>
            rsq r1.w, r0.z
            rcp r1.w, r1.w
            mad r1.w, r1.w, r7.z, r2.w
            cmp r5.z, r4.z, r1.w, r6.z  // ::result<2>

#line 558
            lrp r3.xyz, c1.x, r5, r0  // ::result<0,1,2>
          else
            if_eq r2.x, c14.w

#line 564
              rcp r1.w, c1.x
              mul_sat r1.xyz, r1.w, r1  // Blend::blendColor<0,1,2>

#line 569
              add r2.xyz, r1, -c3.w
              add r1.xyz, r1, r1
              add r4.xyz, -r0, c3.z
              rcp r1.w, r1.x
              mad r1.w, r4.x, -r1.w, c3.z
              max r2.w, r1.w, c3.x
              cmp r1.x, -r1.x, r1.x, r2.w
              add r5.xyz, r2, r2
              mad r6.xyz, r2, c11.y, c11.z
              mad r7.xyz, r2, -c10.z, c10.w
              rcp r1.w, r7.x
              mul r1.w, r0.x, r1.w
              min r2.w, r1.w, c3.z
              cmp r1.w, r6.x, r5.x, r2.w
              cmp r8.x, r2.x, r1.w, r1.x  // ::result<0>
              rcp r1.x, r1.y
              mad r1.x, r4.y, -r1.x, c3.z
              max r2.x, r1.x, c3.x
              cmp r1.x, -r1.y, r1.y, r2.x
              rcp r1.y, r7.y
              mul r1.y, r0.y, r1.y
              min r2.x, r1.y, c3.z
              cmp r1.y, r6.y, r5.y, r2.x
              cmp r8.y, r2.y, r1.y, r1.x  // ::result<1>
              rcp r1.x, r1.z
              mad r1.x, r4.z, -r1.x, c3.z
              max r2.x, r1.x, c3.x
              cmp r1.x, -r1.z, r1.z, r2.x
              rcp r1.y, r7.z
              mul r1.y, r0.z, r1.y
              min r2.x, r1.y, c3.z
              cmp r1.y, r6.z, r5.z, r2.x
              cmp r8.z, r2.z, r1.y, r1.x  // ::result<2>

#line 572
              lrp r3.xyz, c1.x, r8, r0  // ::result<0,1,2>
            endif
          endif
        endif
      endif

#line 588
    else
      mov r3, c3.x
    endif
    cmp oC0, -r0.w, r0, r3  // ::main<0,1,2,3>

// approximately 776 instruction slots used (2 texture, 774 arithmetic)
